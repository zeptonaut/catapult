#!/usr/bin/env python
# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Updates the 64 bit d8 binary for the specified target OS to match the v8
version used in the current version of the specified Chromium channel.

Currently, we can only update the d8 binary for the operating system that we're
building on.

This script assumes that git is installed and the computer meets all
other prerequisites to build v8 normally (like having depot_tools installed and
in the path).

Example usage:
$ tracing/bin/update_v8 linux stable
"""

import contextlib
import json
import os
import subprocess
import sys
import tempfile
import urllib2

OMAHAPROXY_VERSION_MAP_URL = 'https://omahaproxy.appspot.com/all.json'
V8_DIR = 'third_party/vinn/third_party/v8'
VALID_OS_LIST = ['linux', 'mac', 'win']
VALID_CHANNEL_LIST = ['stable', 'canary', 'beta', 'dev']

def Main(args):
  if len(args) != 2:
    print('Usage: update_v8 <target_os> <target_channel>')
    return 1

  target_os = args[0]
  target_channel = args[1]

  if target_os not in VALID_OS_LIST:
    print('Invalid target OS. Valid: {0}'.format(VALID_OS_LIST))
    return 1

  if target_channel not in VALID_CHANNEL_LIST:
    print('Invalid target channel. Valid: {0}'.format(VALID_CHANNEL_LIST))
    return 1

  # Ensure that we're in a catapult checkout.
  git_command_failed = False
  origin_url = ''

  try:
    origin_url = subprocess.check_output('git config --get remote.origin.url',
                                         shell=True)
  except subprocess.CalledProcessError:
    # git config returned an error, meaning that we're not in a git repo.
    git_command_failed = True

  if git_command_failed or 'catapult' not in origin_url:
    print('Command must be run from inside the catapult repo.')
    return 1

  # Fetch the current version map from omahaproxy.
  response = urllib2.urlopen(OMAHAPROXY_VERSION_MAP_URL)
  versions = json.loads(response.read())

  # Find the v8 version that corresponds to the current target OS and target
  # channel.
  v8_version = None
  for curr_os in versions:
    for curr_version in curr_os['versions']:
      if (curr_version['os'] == target_os and
          curr_version['channel'] == target_channel):
        v8_version = curr_version['v8_version']

  # Clone v8, checkout the version that corresponds to our target OS and target
  # channel, and build the d8 binary.
  v8_checkout_path = tempfile.mkdtemp()
  with cd(v8_checkout_path):
    subprocess.check_call('fetch v8', shell=True)

    with cd('v8'):
      subprocess.check_call('git checkout {0}'.format(v8_version), shell=True)

      os.environ['GYP_GENERATORS'] = 'ninja'
      subprocess.check_call('build/gyp_v8 -Dtarget_arch=x64', shell=True)
      subprocess.check_call('ninja -C out/Release d8', shell=True)

  # Move the d8 binary into place.
  project_root = subprocess.check_output('git rev-parse --show-toplevel',
                                         shell=True).replace('\n', '')

  with cd(project_root):
    print os.getcwd()
    d8_src = '{0}/v8/out/Release/d8'.format(v8_checkout_path)
    d8_dst = '{0}/{1}/x86_64/d8'.format(V8_DIR, target_os)

    subprocess.check_call('mv {0} {1}'.format(d8_src, d8_dst), shell=True)

    # Update the v8 version number in its README.chromium file.
    sed_cmd = 's/\([0-9\.]*\) ({0})/{1} ({0})/g'.format(target_os, v8_version)
    full_sed_cmd = 'sed -i "" "{0}" {1}/README.chromium'.format(sed_cmd, V8_DIR)

    subprocess.check_call(full_sed_cmd, shell=True)

  return 0

# Provides a context manager that changes the working directory while in scope.
@contextlib.contextmanager
def cd(new_path):
  old_path = os.getcwd()
  os.chdir(os.path.expanduser(new_path))
  try:
    yield
  finally:
    os.chdir(old_path)

if __name__ == '__main__':
  sys.exit(Main(sys.argv[1:]))
